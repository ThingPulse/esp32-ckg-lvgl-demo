; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; http://docs.platformio.org/page/projectconf.html

[platformio]
default_envs = emulator_64bits
;default_envs = thingpulse-color-kit-grande

; Shared options
[env]
build_flags =
  ; Don't use lv_conf.h. Tweak params via platfom.ini.
  -D LV_CONF_SKIP
  -D LV_CONF_INCLUDE_SIMPLE
  ; Enable LVGL demo, remove when working on your own project
  -D LV_USE_DEMO_WIDGETS=1
  ; Add more defines below to overide lvgl:/src/lv_conf_simple.h
lib_deps =
  ; Use direct URL, because package registry is unstable
  ;lvgl@~7.11.0
  lvgl=https://github.com/lvgl/lvgl/archive/refs/tags/v8.2.0.zip
lib_archive = false


[env:emulator_64bits]
platform = native@^1.1.3
extra_scripts = support/sdl2_build_extra.py
build_flags =
  ${env.build_flags}
  ; -D LV_LOG_LEVEL=LV_LOG_LEVEL_INFO
  -D LV_LOG_PRINTF=1
  ; Add recursive dirs for hal headers search
  !python -c "import os; print(' '.join(['-I {}'.format(i[0].replace('\x5C','/')) for i in os.walk('hal/sdl2')]))"
  -lSDL2
  -D NATIVE
  ; SDL drivers options
  -D LV_LVGL_H_INCLUDE_SIMPLE
  -D LV_DRV_NO_CONF
  -D USE_SDL
  -D SDL_HOR_RES=480
  -D SDL_VER_RES=320  
  -D SDL_ZOOM=1
  -D SDL_INCLUDE_PATH="\"SDL2/SDL.h\""

  ; LVGL memory options, setup for the demo to run properly
  -D LV_MEM_CUSTOM=1
  -D LV_MEM_SIZE="(128U * 1024U)"
  -I /opt/homebrew/Cellar/sdl2/2.26.5/include
  -L /opt/homebrew/Cellar/sdl2/2.26.5/lib
  
lib_deps =
  ${env.lib_deps}
  ; Use direct URL, because package registry is unstable
  ;lv_drivers@~7.9.0
  lv_drivers=https://github.com/lvgl/lv_drivers/archive/refs/tags/v8.2.0.zip
build_src_filter =
  +<*>
  +<../hal/sdl2>
  ; Force compile LVGL demo, remove when working on your own project
  +<../.pio/libdeps/emulator_64bits/lvgl/demos>


[env:emulator_32bits]
extends = env:emulator_64bits
build_flags =
  ${env:emulator_64bits.build_flags}
  -m32
build_src_filter =
  +<*>
  +<../hal/sdl2>
  +<../.pio/libdeps/emulator_32bits/lvgl/demos>

[env:stm32f429_disco]
platform = ststm32@^8.0.0
board = disco_f429zi
framework = stm32cube
build_flags =
  ${env.build_flags}
  -D LV_LOG_LEVEL=LV_LOG_LEVEL_NONE
  ; header's default is 25MHz, but board uses 8MHz crystal
  -D HSE_VALUE=8000000
  ; Add recursive dirs for hal headers search
  !python -c "import os; print(' '.join(['-I {}'.format(i[0].replace('\x5C','/')) for i in os.walk('hal/stm32f429_disco')]))"
lib_deps =
  ${env.lib_deps}
  BSP-ili9341
  BSP-stmpe811
build_src_filter =
  +<*>
  +<../hal/stm32f429_disco>
  ; Force compile LVGL demo, remove when working on your own project
  +<../.pio/libdeps/stm32f429_disco/lvgl/demos>

[env:thingpulse-color-kit-grande]
platform = espressif32@~6.1.0
board = esp-wrover-kit
framework = arduino
; Adjust port and speed to your system and its capabilities e.g. "upload_port = COM3" on Windows.
; To list all availble ports you may also run 'pio device list' in the Visual Studio Code terminal window.
;;upload_port = /dev/tty.wchusbserial54790238451
;;monitor_port = /dev/tty.wchusbserial54790238451
board_build.f_cpu         = 240000000L
monitor_speed = 115200
; For your OS & driver combination you might have to lower this to 921600 or even 460800.
upload_speed = 1500000
monitor_filters = esp32_exception_decoder, time
build_flags =
  ${env.build_flags}
  ; core flags
  -DCORE_DEBUG_LEVEL=3
  -DBOARD_HAS_PSRAM
  -mfix-esp32-psram-cache-issue
  ; Add recursive dirs for hal headers search
  !python -c "import os; print(' '.join(['-I {}'.format(i[0].replace('\x5C','/')) for i in os.walk('hal/thingpulse-color-kit-grande')]))"
  ; TFT_eSPI flags
  ; Below we replicate the flags from TFT_eSPI/User_Setups/Setup21_ILI9488.h.
  ; You can't mix'n match from their .h and -D here.
  -D USER_SETUP_LOADED=1 # 1 => will not load User_Setup.h from TFT_eSPI but rely on the flags defined here
  -D ILI9488_DRIVER=1
  -D TFT_MISO=19
  -D TFT_MOSI=18
  -D TFT_SCLK=05
  -D TFT_CS=15
  -D TFT_DC=2
  -D TFT_RST=4
  -D TFT_BL=32
  -D TFT_SCREEN_WIDTH=480
  -D TFT_SCREEN_HEIGHT=320
  -D TFT_ROTATION=3
  -D TFT_LED_BRIGHTNESS=200
  -D TOUCH_ROTATION=1
  -D TOUCH_SENSITIVITY=40
  -D TOUCH_SDA=23
  -D TOUCH_SCL=22
  ; As we're using OpenFontRender we don't need any of the TFT_eSPI built-in fonts.
  ; Font descriptions at TFT_eSPI/User_Setups/Setup21_ILI9488.h
  -D LOAD_GLCD=0
  -D LOAD_FONT2=0
  -D LOAD_FONT4=0
  -D LOAD_FONT6=0
  -D LOAD_FONT7=0
  -D LOAD_FONT8=0
  -D LOAD_GFXFF=0
  -D SMOOTH_FONT=1
  -D SPI_FREQUENCY=60000000
  ; required if you include OpenFontRender and build on macOS
  -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/**
  -D LV_CONF_SKIP
  -D LV_CONF_INCLUDE_SIMPLE
  ; Enable LVGL demo, remove when working on your own project
  -D LV_USE_DEMO_WIDGETS=1
  -D LV_FONT_MONTSERRAT_10
  -D LV_FONT_MONTSERRAT_12
  -D LV_FONT_MONTSERRAT_14
  -D LV_FONT_MONTSERRAT_16
  -D LV_FONT_MONTSERRAT_18
  -D LV_FONT_MONTSERRAT_28
  -D LV_FONT_SIMSUN_16_CJK=1
  -D LV_SPRINTF_CUSTOM=1
  -D LV_USE_PERF_MONITOR=1
  -D LV_LVGL_H_INCLUDE_SIMPLE
  -D LV_MEM_CUSTOM=1
  -D LV_MEM_SIZE="(128U * 1024U)"
  -D LV_TICK_CUSTOM=1
  ; Enable LVGL demo, remove when working on your own project
board_build.partitions = no_ota.csv
board_build.filesystem = littlefs
lib_archive = false
build_src_filter =
  +<*>
  +<../hal/thingpulse-color-kit-grande>
  ; Force compile LVGL demo, remove when working on your own project
  +<../.pio/libdeps/thingpulse-color-kit-grande/lvgl/demos>
lib_deps =
  ${env.lib_deps}
  SPI
  FS
  SPIFFS
  Wire
  bodmer/TFT_eSPI@~2.5.30
  ;bodmer/TJpg_Decoder@~1.0.8
  ;https://github.com/Bodmer/OpenFontRender#96a29bc ; no tags or releases to reference :( -> pin to Git revision
  ;lvgl=https://github.com/lvgl/lvgl/archive/refs/tags/v8.3.0.zip
